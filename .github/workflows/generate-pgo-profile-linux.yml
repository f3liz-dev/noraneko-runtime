---
# SPDX-License-Identifier: MPL-2.0

name: Generate PGO Profile (Linux)

'on':
  workflow_call:
    inputs:
      browser-artifact-name:
        description: 'Browser artifact to download'
        required: true
        type: string
      artifact-path:
        description: 'Path where browser artifact will be placed'
        required: false
        type: string
        default: '/home/runner/artifact'
      runner:
        description: 'Runner label to execute on'
        required: false
        type: string
        default: 'ubuntu-latest'
      target-arch:
        description: 'Target architecture (x86_64, aarch64)'
        required: false
        type: string
        default: 'x86_64'
      upload-artifact-name:
        description: 'Name for uploaded profile data artifact'
        required: false
        type: string

jobs:
  generate-profdata-and-jarlog:
    name: Generate PGO Profile Data (${{ inputs.target-arch }})
    runs-on: ${{ inputs.runner }}
    env:
      ARTIFACT_PATH: ${{ inputs.artifact-path }}
      TARGET_ARCH: ${{ inputs.target-arch }}
      BROWSER_ARTIFACT_NAME: ${{ inputs.browser-artifact-name }}
      UPLOAD_ARTIFACT_NAME: >-
        ${{ inputs.upload-artifact-name ||
        format('{0}-profile-generate-output', inputs.browser-artifact-name) }}

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.browser-artifact-name }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup system dependencies
        if: runner.os == 'Linux'
        run: |
          echo "Installing system dependencies..."
          sudo apt-get update -qq

          sudo apt-get install -y --no-install-recommends \
            python3-dev python3-pip python3-setuptools python3-venv \
            xvfb mesa-utils xauth \
            build-essential \
            libgtk-3-dev libgtk-4-dev \
            libdbus-glib-1-dev \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libx11-dev libxext-dev \
            libxt-dev libxss-dev \
            libgl1 libglx-mesa0 libgl1-mesa-dri \
            libasound2-dev libpulse-dev \
            llvm llvm-dev clang \
            fonts-liberation fonts-dejavu-core \
            pkg-config autotools-dev \
            curl wget unzip

          export LIBGL_ALWAYS_SOFTWARE=1

          if ! command -v llvm-profdata >/dev/null 2>&1; then
            echo "ERROR: llvm-profdata not found after installation"
            exit 1
          fi

          echo "System dependencies installed successfully"
          llvm-profdata --version

      - name: Bootstrap Mozilla build environment
        shell: bash
        run: |
          echo "Bootstrapping Mozilla build environment..."

          chmod +x ./mach

          BOOTSTRAP_ATTEMPTS=0
          MAX_ATTEMPTS=2

          while [ $BOOTSTRAP_ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            BOOTSTRAP_ATTEMPTS=$((BOOTSTRAP_ATTEMPTS + 1))
            echo "Bootstrap attempt $BOOTSTRAP_ATTEMPTS of $MAX_ATTEMPTS..."

            if timeout 600 ./mach --no-interactive bootstrap \
               --application-choice browser; then
              echo "Bootstrap completed successfully"
              break
            else
              echo "Bootstrap attempt $BOOTSTRAP_ATTEMPTS failed"
              if [ $BOOTSTRAP_ATTEMPTS -lt $MAX_ATTEMPTS ]; then
                echo "Retrying after cleanup..."
                rm -rf ~/.mozbuild/python* 2>/dev/null || true
                sleep 10
              else
                echo "All bootstrap attempts failed, continuing with system tools"
              fi
            fi
          done

      - name: Extract browser artifact
        run: |
          echo "Extracting browser artifact from ${{ env.ARTIFACT_PATH }}..."
          cd ${{ env.ARTIFACT_PATH }}

          # Check for supported archive formats using proper file existence patterns
          if compgen -G "*.tar.xz" > /dev/null; then
            echo "Extracting .tar.xz archive..."
            tar -xf *.tar.xz
          elif compgen -G "*.tar.bz2" > /dev/null; then
            echo "Extracting .tar.bz2 archive..."
            tar -xf *.tar.bz2
          elif compgen -G "*.tar.gz" > /dev/null; then
            echo "Extracting .tar.gz archive..."
            tar -xf *.tar.gz
          elif compgen -G "*.zip" > /dev/null; then
            echo "Extracting .zip archive..."
            unzip -q *.zip
          else
            echo "ERROR: No supported archive format found"
            ls -la
            exit 1
          fi

          echo "Archive extracted, contents:"
          find . -maxdepth 3 -type f | head -20

          BROWSER_PATH=""

          for pattern in "noraneko/noraneko" "*/noraneko" "noraneko-*/noraneko"; do
            matches=($(find . -path "./$pattern" -type f 2>/dev/null))
            if [[ ${#matches[@]} -gt 0 ]]; then
              BROWSER_PATH="${matches[0]}"
              echo "Found browser binary: $BROWSER_PATH"
              break
            fi
          done

          if [[ -z "$BROWSER_PATH" ]]; then
            echo "Pattern search failed, looking for any noraneko executable..."
            BROWSER_PATH=$(find . -name "noraneko" -type f -executable 2>/dev/null | head -1)
          fi

          if [[ -z "$BROWSER_PATH" ]]; then
            echo "ERROR: Browser binary not found!"
            echo "Available files:"
            find . -type f -name "*noraneko*" -o -name "*firefox*" | head -20
            exit 1
          fi

          BROWSER_BINARY_PATH="$(cd "$(dirname "$BROWSER_PATH")" && pwd)/$(basename "$BROWSER_PATH")"
          chmod +x "$BROWSER_BINARY_PATH"

          echo "BROWSER_BINARY_PATH=$BROWSER_BINARY_PATH" >> $GITHUB_ENV
          echo "Browser binary found at: $BROWSER_BINARY_PATH"

          file "$BROWSER_BINARY_PATH" || echo "File command failed"
          ldd "$BROWSER_BINARY_PATH" 2>/dev/null | head -5 || echo "Dynamic linking check failed"

      - name: Generate profile data
        if: runner.os == 'Linux'
        run: |
          chmod +x ./.github/workflows/scripts/profile_generation.sh
          ./.github/workflows/scripts/profile_generation.sh --binary "$BROWSER_BINARY_PATH" --platform linux

      - name: Upload profile data
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UPLOAD_ARTIFACT_NAME }}
          path: |
            merged.profdata
            en-US.log
          retention-days: 7
