---
# SPDX-License-Identifier: MPL-2.0

name: Generate PGO Profile (Linux)

'on':
  workflow_call:
    inputs:
      browser-artifact-name:
        description: 'Browser artifact to download'
        required: true
        type: string
      artifact-path:
        description: 'Path where browser artifact will be placed'
        required: false
        type: string
        default: '/home/runner/artifact'
      runner:
        description: 'Runner label to execute on'
        required: false
        type: string
        default: 'ubuntu-latest'
      target-arch:
        description: 'Target architecture (x86_64, aarch64)'
        required: false
        type: string
        default: 'x86_64'
      upload-artifact-name:
        description: 'Name for uploaded profile data artifact'
        required: false
        type: string

jobs:
  generate-profdata-and-jarlog:
    name: Generate PGO Profile Data (${{ inputs.target-arch }})
    runs-on: ${{ inputs.runner }}
    env:
      UPLOAD_ARTIFACT_NAME: >-
        ${{ inputs.upload-artifact-name ||
        format('{0}-profile-generate-output', inputs.browser-artifact-name) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download browser artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.browser-artifact-name }}
          path: ${{ inputs.artifact-path }}

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y xvfb llvm clang

      - name: Bootstrap Mozilla build
        run: |
          chmod +x ./mach
          ./mach --no-interactive bootstrap --application-choice browser

      - name: Setup directories
        run: |
          mkdir -p obj-firefox/dist
          mkdir -p /tmp/output
          mkdir -p /tmp/clang/bin
          ln -sf $(which llvm-profdata) /tmp/clang/bin/llvm-profdata

      - name: Extract and prepare browser
        run: |
          cd ${{ inputs.artifact-path }}
          
          # Extract archive
          if ls *.tar.* >/dev/null 2>&1; then
            tar -xf *.tar.*
          elif ls *.zip >/dev/null 2>&1; then
            unzip -q *.zip
          fi
          
          echo "Contents after extraction:"
          ls -la
          
          # Find browser directory - look for directories first, then check subdirectories
          BROWSER_DIR=""
          
          # Look for top-level directories containing browser
          for dir in */; do
            if [[ -d "$dir" ]]; then
              if find "$dir" -name "noraneko" -o -name "firefox" -o -name "firefox-bin" | grep -q .; then
                BROWSER_DIR="$dir"
                break
              fi
            fi
          done
          
          # If not found, look for any directory with noraneko or firefox in name
          if [[ -z "$BROWSER_DIR" ]]; then
            BROWSER_DIR=$(find . -maxdepth 1 -type d \( -name "*noraneko*" -o -name "*firefox*" \) | head -1)
          fi
          
          if [[ -n "$BROWSER_DIR" && -d "$BROWSER_DIR" ]]; then
            echo "Found browser directory: $BROWSER_DIR"
            mv "$BROWSER_DIR" $GITHUB_WORKSPACE/obj-firefox/dist/firefox
          else
            echo "Browser directory not found. Available contents:"
            find . -type d -maxdepth 2
            echo "Files:"
            find . -name "*noraneko*" -o -name "*firefox*"
            exit 1
          fi

      - name: Generate profile
        run: |
          export MOZ_FETCHES_DIR=/tmp
          export JARLOG_FILE=en-US.log
          export LLVM_PROFDATA=/tmp/clang/bin/llvm-profdata
          export DISPLAY=:99
          
          # Start Xvfb
          Xvfb :99 -screen 0 1024x768x24 &
          XVFB_PID=$!
          sleep 3
          
          # Find browser binary
          BROWSER=$(find obj-firefox/dist/firefox -name "noraneko" -o -name "firefox*" | head -1)
          chmod +x "$BROWSER"
          
          # Generate profile
          ./mach python build/pgo/profileserver.py --binary "$BROWSER"
          
          # Cleanup
          kill $XVFB_PID

      - name: Upload profile data
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UPLOAD_ARTIFACT_NAME }}
          path: |
            merged.profdata
            en-US.log
          retention-days: 7
