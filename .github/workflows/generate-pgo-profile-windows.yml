# SPDX-License-Identifier: MPL-2.0
#
# PGO profile generation workflow for Windows platform.
# 
# This workflow handles profile data collection for Profile-Guided Optimization (PGO) builds on Windows.
# It downloads a browser artifact, extracts it, and runs profile collection workloads.
#
# Inputs:
# - browser-artifact-name (required): artifact produced by build job to download
# - artifact-path (optional): path on runner where artifact is placed
# - runner (optional): runner label to run on (default: windows-latest)
# - target-arch (optional): architecture string (x86_64)
# - upload-artifact-name (optional): artifact name to upload the profdata/jarlog under
#

on:
  workflow_call:
    # Callers may pass secrets using `secrets: inherit` when they invoke this reusable workflow.
    # Do not hardcode secrets here; the caller should specify `secrets: inherit`.
    inputs:
      browser-artifact-name:
        description: 'Artifact to download'
        required: true
        type: string
      artifact-path:
        description: 'Path on the runner where the browser artifact will be placed'
        required: false
        type: string
        default: 'C:\artifact'
      runner:
        description: 'Runner label to execute the job on'
        required: false
        type: string
        default: 'windows-latest'
      target-arch:
        description: 'Target architecture (x86_64)'
        required: false
        type: string
        default: 'x86_64'
      upload-artifact-name:
        description: 'Name for the uploaded profdata/jarlog artifact'
        required: false
        type: string

jobs:
  generate-profdata-and-jarlog:
    name: Generate PGO Profile Data and Jarlog (${{ inputs.target-arch }})
    runs-on: ${{ inputs.runner }}
    # expose inputs as env for steps
    env:
      ARTIFACT_PATH: ${{ inputs.artifact-path }}
      TARGET_ARCH: ${{ inputs.target-arch }}
      BROWSER_ARTIFACT_NAME: ${{ inputs.browser-artifact-name }}
      UPLOAD_ARTIFACT_NAME: ${{ inputs.upload-artifact-name || format('{0}-profile-generate-output', inputs.browser-artifact-name) }}

    steps:
      # Download the browser build artifact produced by build workflows
      - name: Download Build Artifact 📥
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.browser-artifact-name }}
          path: ${{ env.ARTIFACT_PATH }}

      # Checkout the repository so scripts and mach are available
      - name: Checkout source 🧬
        uses: actions/checkout@v4

      # Setup Python environment
      - name: Setup Python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Setup Mozilla Build environment (Windows) with enhanced error handling
      - name: Setup Mozilla Build 🪛
        shell: pwsh
        run: |
          Write-Host "Setting up Mozilla Build environment..."
          $ProgressPreference = 'SilentlyContinue'
          
          Write-Host "Downloading Mozilla Build..."
          try {
            Invoke-WebRequest -Uri "https://ftp.mozilla.org/pub/mozilla/libraries/win32/MozillaBuildSetup-Latest.exe" -OutFile "C:\MozillaBuildSetup-Latest.exe"
          } catch {
            Write-Error "Failed to download Mozilla Build: $_"
            exit 1
          }
          
          Write-Host "Installing Mozilla Build..."
          try {
            Start-Process -FilePath "C:\MozillaBuildSetup-Latest.exe" -ArgumentList "/S" -Wait -NoNewWindow
          } catch {
            Write-Error "Failed to install Mozilla Build: $_"
            exit 1
          }
          
          Write-Host "Waiting for installation to complete..."
          Start-Sleep -Seconds 30
          
          Write-Host "Verifying Mozilla Build installation..."
          if (Test-Path "C:\mozilla-build\start-shell.bat") {
            Write-Host "Mozilla Build installed successfully"
          } else {
            Write-Error "Mozilla Build installation failed - start-shell.bat not found"
            Get-ChildItem "C:\" -Name "*mozilla*" -ErrorAction SilentlyContinue
            exit 1
          }
          
          # Install additional dependencies
          Write-Host "Installing additional dependencies..."
          try {
            pip install requests
          } catch {
            Write-Warning "Failed to install Python dependencies: $_"
          }

      # Extract browser artifact
      - name: Extract Browser Artifact 📦
        shell: pwsh
        run: |
          Write-Host "Extracting browser artifact from $env:ARTIFACT_PATH..."
          cd $env:ARTIFACT_PATH
          
          # Find and extract zip file
          $zipFiles = Get-ChildItem -Filter "*.zip"
          if ($zipFiles.Count -eq 0) {
            Write-Error "No zip files found in artifact directory"
            Get-ChildItem | ForEach-Object { Write-Host "Found: $($_.Name)" }
            exit 1
          }
          
          $zipFile = $zipFiles[0]
          Write-Host "Extracting: $($zipFile.Name)"
          
          try {
            Expand-Archive -Path $zipFile.FullName -DestinationPath . -Force
            Write-Host "Extraction completed successfully"
          } catch {
            Write-Error "Failed to extract archive: $_"
            exit 1
          }
          
          Write-Host "Contents after extraction:"
          Get-ChildItem -Recurse | Select-Object -First 20 | ForEach-Object { 
            Write-Host "  $($_.FullName)" 
          }
          
          # Try to find the browser binary with specific names
          $possibleNames = @("noraneko.exe", "floorp.exe", "firefox.exe")
          $binaryPath = $null
          
          foreach ($name in $possibleNames) {
            Write-Host "Searching for: $name"
            $found = Get-ChildItem -Recurse -Filter $name -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($found) {
              $binaryPath = $found.FullName
              Write-Host "Found browser binary: $name at $binaryPath"
              break
            }
          }
          
          if (-not $binaryPath) {
            Write-Error "No suitable browser binary found!"
            Write-Host "Available executable files:"
            Get-ChildItem -Recurse -Filter "*.exe" | ForEach-Object { 
              Write-Host "  $($_.FullName)" 
            }
            exit 1
          }
          
          # Verify the binary exists and is executable
          if (-not (Test-Path $binaryPath)) {
            Write-Error "Binary path does not exist: $binaryPath"
            exit 1
          }
          
          # Test basic execution
          Write-Host "Testing binary execution..."
          try {
            $processInfo = Start-Process -FilePath $binaryPath -ArgumentList "--version" -Wait -PassThru -WindowStyle Hidden -ErrorAction Stop
            Write-Host "Binary execution test passed (exit code: $($processInfo.ExitCode))"
          } catch {
            Write-Warning "Binary execution test failed, but continuing: $_"
          }
          
          Write-Host "BROWSER_BINARY_PATH=$binaryPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          Write-Host "Browser binary found at: $binaryPath"

      # Generate Profdata and Jarlog (Windows)
      - name: Generate Profile Data 🔄
        shell: pwsh
        run: |
          $Env:USE_MINTTY = "0"
          
          # Verify Mozilla Build is available
          if (-not (Test-Path "C:\mozilla-build\start-shell.bat")) {
            Write-Error "Mozilla Build not found. Installation may have failed."
            exit 1
          }
          
          # Prepare workspace path for bash (Windows to Unix path conversion)
          $workspace_dir = $env:GITHUB_WORKSPACE -replace "^([A-Z]):", { "/" + $_.Groups[1].Value.toLower() } -replace "\\","/"
          Write-Host "Workspace directory: $workspace_dir"
          
          # Convert Windows path to Unix path for use in Mozilla Build shell
          $unixBinaryPath = $env:BROWSER_BINARY_PATH -replace "^([A-Z]):", { "/" + $_.Groups[1].Value.toLower() } -replace "\\","/"
          Write-Host "Unix binary path: $unixBinaryPath"
          
          # Create Mozilla Build script with enhanced error handling
          cd $env:GITHUB_WORKSPACE
          
          $scriptContent = @"
#!/bin/bash
set -e
set -x

cd $workspace_dir
export PATH=/c/mozilla-build/msys2/usr/bin:`$PATH

echo "Starting Mozilla bootstrap..."
./mach --no-interactive bootstrap --application-choice browser || {
    echo "Bootstrap failed, but continuing with system tools..."
}

echo "Verifying profileserver.py exists..."
if [[ ! -f "build/pgo/profileserver.py" ]]; then
    echo "ERROR: profileserver.py not found"
    find . -name "*profileserver*" -type f || echo "No profileserver files found"
    exit 1
fi

echo "Setting up environment for profile generation..."
export DISPLAY=:0

# Find LLVM profdata tool
LLVM_PROFDATA_PATH="/c/Users/runneradmin/.mozbuild/clang/bin/llvm-profdata.exe"
if [[ ! -f "`$LLVM_PROFDATA_PATH" ]]; then
    echo "Warning: LLVM profdata not found at expected location, trying alternatives..."
    LLVM_PROFDATA_PATH=`$(find /c/Users/runneradmin/.mozbuild -name "llvm-profdata.exe" -type f 2>/dev/null | head -1)
    
    if [[ -z "`$LLVM_PROFDATA_PATH" ]]; then
        echo "Warning: Using system llvm-profdata"
        LLVM_PROFDATA_PATH="llvm-profdata"
    fi
fi

echo "Using LLVM_PROFDATA: `$LLVM_PROFDATA_PATH"

echo "Starting profile generation..."
echo "Binary path: $unixBinaryPath"

# Run profile generation with timeout and proper error handling
timeout 1200 env LLVM_PROFDATA="`$LLVM_PROFDATA_PATH" JARLOG_FILE=en-US.log \
    python3 build/pgo/profileserver.py --binary "$unixBinaryPath" || {
    echo "Profile generation failed with exit code: `$?"
    echo "Checking for any generated files..."
    ls -la *.profdata *.log 2>/dev/null || echo "No profile files found"
    exit 1
}

echo "Profile generation completed"

# Verify generated files
if [[ -f "merged.profdata" && -f "en-US.log" ]]; then
    echo "Profile generation successful!"
    echo "merged.profdata size: `$(stat -c%s merged.profdata 2>/dev/null || echo "unknown") bytes"
    echo "en-US.log size: `$(stat -c%s en-US.log 2>/dev/null || echo "unknown") bytes"
else
    echo "ERROR: Required profile files not generated"
    ls -la . | grep -E "(profdata|log)" || echo "No profile files found"
    exit 1
fi
"@
          
          # Write script with proper UTF-8 encoding
          $scriptContent | Out-File -FilePath "mozilla-build-run.sh" -Encoding UTF8
          
          Write-Host "Created Mozilla Build script:"
          Get-Content "mozilla-build-run.sh" | Select-Object -First 10
          Write-Host "..."
          
          Write-Host "Executing profile generation via Mozilla Build shell..."
          try {
            & "C:\mozilla-build\start-shell.bat" "$($env:GITHUB_WORKSPACE)\mozilla-build-run.sh"
            $exitCode = $LASTEXITCODE
            
            if ($exitCode -ne 0) {
              Write-Error "Mozilla Build shell exited with code: $exitCode"
              exit $exitCode
            }
          } catch {
            Write-Error "Failed to execute Mozilla Build shell: $_"
            exit 1
          }
          
          Write-Host "Profile generation process completed"
          
          # Final verification
          if ((Test-Path "merged.profdata") -and (Test-Path "en-US.log")) {
            $profdataSize = (Get-Item "merged.profdata").Length
            $jarlogSize = (Get-Item "en-US.log").Length
            
            Write-Host "Profile generation verification successful!"
            Write-Host "  merged.profdata: $profdataSize bytes"
            Write-Host "  en-US.log: $jarlogSize bytes"
            
            if ($profdataSize -eq 0) {
              Write-Warning "merged.profdata is empty"
            }
            if ($jarlogSize -eq 0) {
              Write-Warning "en-US.log is empty"
            }
          } else {
            Write-Error "Profile generation failed - required files not found"
            Write-Host "Available files in current directory:"
            Get-ChildItem -Filter "*profdata*", "*log*" | ForEach-Object { Write-Host "  $($_.Name)" }
            exit 1
          }

      # Upload profdata and jarlog for downstream jobs to consume.
      - name: Upload Profile Data 🎁
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UPLOAD_ARTIFACT_NAME }}
          path: |
            merged.profdata
            en-US.log
          retention-days: 7
