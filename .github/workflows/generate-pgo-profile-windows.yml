---
# SPDX-License-Identifier: MPL-2.0

name: Generate PGO Profile (Windows)

'on':
  workflow_call:
    inputs:
      browser-artifact-name:
        description: 'Browser artifact to download'
        required: true
        type: string
      artifact-path:
        description: 'Path where browser artifact will be placed'
        required: false
        type: string
        default: 'C:\artifact'
      runner:
        description: 'Runner label to execute on'
        required: false
        type: string
        default: 'windows-latest'
      target-arch:
        description: 'Target architecture (x86_64)'
        required: false
        type: string
        default: 'x86_64'
      upload-artifact-name:
        description: 'Name for uploaded profile data artifact'
        required: false
        type: string

jobs:
  generate-profdata-and-jarlog:
    name: Generate PGO Profile Data (${{ inputs.target-arch }})
    runs-on: ${{ inputs.runner }}
    env:
      ARTIFACT_PATH: ${{ inputs.artifact-path }}
      TARGET_ARCH: ${{ inputs.target-arch }}
      BROWSER_ARTIFACT_NAME: ${{ inputs.browser-artifact-name }}
      UPLOAD_ARTIFACT_NAME: >-
        ${{ inputs.upload-artifact-name ||
        format('{0}-profile-generate-output', inputs.browser-artifact-name) }}

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.browser-artifact-name }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Mozilla Build
        shell: pwsh
        run: |
          Write-Host "Setting up Mozilla Build environment..."
          $ProgressPreference = 'SilentlyContinue'

          Write-Host "Downloading Mozilla Build..."
          try {
            $url = "https://ftp.mozilla.org/pub/mozilla/libraries/win32/MozillaBuildSetup-Latest.exe"
            Invoke-WebRequest -Uri $url -OutFile "C:\MozillaBuildSetup-Latest.exe"
          } catch {
            Write-Error "Failed to download Mozilla Build: $_"
            exit 1
          }

          Write-Host "Installing Mozilla Build..."
          try {
            Start-Process -FilePath "C:\MozillaBuildSetup-Latest.exe" -ArgumentList "/S" -Wait -NoNewWindow
          } catch {
            Write-Error "Failed to install Mozilla Build: $_"
            exit 1
          }

          Write-Host "Waiting for installation to complete..."
          Start-Sleep -Seconds 30

          Write-Host "Verifying Mozilla Build installation..."
          if (Test-Path "C:\mozilla-build\start-shell.bat") {
            Write-Host "Mozilla Build installed successfully"
          } else {
            Write-Error "Mozilla Build installation failed - start-shell.bat not found"
            Get-ChildItem "C:\" -Name "*mozilla*" -ErrorAction SilentlyContinue
            exit 1
          }

          Write-Host "Installing additional dependencies..."
          try {
            pip install requests
          } catch {
            Write-Warning "Failed to install Python dependencies: $_"
          }

      - name: Extract browser artifact
        shell: pwsh
        run: |
          Write-Host "Extracting browser artifact from $env:ARTIFACT_PATH..."
          cd $env:ARTIFACT_PATH

          $zipFiles = Get-ChildItem -Filter "*.zip"
          if ($zipFiles.Count -eq 0) {
            Write-Error "No zip files found in artifact directory"
            Get-ChildItem | ForEach-Object { Write-Host "Found: $($_.Name)" }
            exit 1
          }

          $zipFile = $zipFiles[0]
          Write-Host "Extracting: $($zipFile.Name)"

          try {
            Expand-Archive -Path $zipFile.FullName -DestinationPath . -Force
            Write-Host "Extraction completed successfully"
          } catch {
            Write-Error "Failed to extract archive: $_"
            exit 1
          }

          Write-Host "Contents after extraction:"
          Get-ChildItem -Recurse | Select-Object -First 20 | ForEach-Object {
            Write-Host "  $($_.FullName)"
          }

          $possibleNames = @("noraneko.exe", "floorp.exe", "firefox.exe")
          $binaryPath = $null

          foreach ($name in $possibleNames) {
            Write-Host "Searching for: $name"
            $found = Get-ChildItem -Recurse -Filter $name -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($found) {
              $binaryPath = $found.FullName
              Write-Host "Found browser binary: $name at $binaryPath"
              break
            }
          }

          if (-not $binaryPath) {
            Write-Error "No suitable browser binary found!"
            Write-Host "Available executable files:"
            Get-ChildItem -Recurse -Filter "*.exe" | ForEach-Object {
              Write-Host "  $($_.FullName)"
            }
            exit 1
          }

          if (-not (Test-Path $binaryPath)) {
            Write-Error "Binary path does not exist: $binaryPath"
            exit 1
          }

          Write-Host "Testing binary execution..."
          try {
            $processInfo = Start-Process -FilePath $binaryPath -ArgumentList "--version" -Wait -PassThru -WindowStyle Hidden -ErrorAction Stop
            Write-Host "Binary execution test passed (exit code: $($processInfo.ExitCode))"
          } catch {
            Write-Warning "Binary execution test failed, but continuing: $_"
          }

          Write-Host "BROWSER_BINARY_PATH=$binaryPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          Write-Host "Browser binary found at: $binaryPath"

          # Debug: Show the binary path that will be converted
          Write-Host "Binary path to convert: $binaryPath"

      - name: Generate profile data
        shell: pwsh
        run: |
          $Env:USE_MINTTY = "0"

          if (-not (Test-Path "C:\mozilla-build\start-shell.bat")) {
            Write-Error "Mozilla Build not found. Installation may have failed."
            exit 1
          }

          # Debug: Show the binary path that will be converted
          Write-Host "Binary path to convert: $env:BROWSER_BINARY_PATH"

          if (-not $env:BROWSER_BINARY_PATH) {
            Write-Error "BROWSER_BINARY_PATH environment variable is empty or not set"
            exit 1
          }

          $workspace_dir = $env:GITHUB_WORKSPACE -replace "^([A-Z]):", { "/c" } -replace "\\","/"
          if ($workspace_dir -match "^([A-Z]):") {
            $drive = $matches[1].ToLower()
            $workspace_dir = $workspace_dir -replace "^[A-Z]:", "/$drive"
          }
          Write-Host "Workspace directory: $workspace_dir"

          $unixBinaryPath = $env:BROWSER_BINARY_PATH -replace "^([A-Z]):", { "/c" } -replace "\\","/"
          if ($env:BROWSER_BINARY_PATH -match "^([A-Z]):") {
            $drive = $matches[1].ToLower()
            $unixBinaryPath = $env:BROWSER_BINARY_PATH -replace "^[A-Z]:", "/$drive" -replace "\\","/"
          }
          Write-Host "Unix binary path: $unixBinaryPath"
          
          if (-not $unixBinaryPath) {
            Write-Error "Failed to convert binary path to Unix format"
            exit 1
          }

          cd $env:GITHUB_WORKSPACE

          $scriptContent = @"
          #!/bin/bash
          set -e
          set -x

          cd $workspace_dir
          export PATH=/c/mozilla-build/msys2/usr/bin:`$PATH

          echo "Starting Mozilla bootstrap..."
          ./mach --no-interactive bootstrap --application-choice browser || {
              echo "Bootstrap failed, but continuing with system tools..."
          }

          echo "Making profile generation script executable..."
          chmod +x ./.github/workflows/scripts/profile_generation.sh

          echo "Running profile generation script..."
          export BROWSER_BINARY_PATH="$unixBinaryPath"
          ./.github/workflows/scripts/profile_generation.sh --binary "$unixBinaryPath" --platform windows
          "@

          $scriptContent | Out-File -FilePath "mozilla-build-run.sh" -Encoding UTF8

          Write-Host "Created Mozilla Build script:"
          Get-Content "mozilla-build-run.sh" | Select-Object -First 10
          Write-Host "..."

          Write-Host "Executing profile generation via Mozilla Build shell..."
          try {
            & "C:\mozilla-build\start-shell.bat" "$($env:GITHUB_WORKSPACE)\mozilla-build-run.sh"
            $exitCode = $LASTEXITCODE

            if ($exitCode -ne 0) {
              Write-Error "Mozilla Build shell exited with code: $exitCode"
              exit $exitCode
            }
          } catch {
            Write-Error "Failed to execute Mozilla Build shell: $_"
            exit 1
          }

          Write-Host "Profile generation process completed"

          if ((Test-Path "merged.profdata") -and (Test-Path "en-US.log")) {
            $profdataSize = (Get-Item "merged.profdata").Length
            $jarlogSize = (Get-Item "en-US.log").Length

            Write-Host "Profile generation verification successful!"
            Write-Host "  merged.profdata: $profdataSize bytes"
            Write-Host "  en-US.log: $jarlogSize bytes"

            if ($profdataSize -eq 0) {
              Write-Warning "merged.profdata is empty"
            }
            if ($jarlogSize -eq 0) {
              Write-Warning "en-US.log is empty"
            }
          } else {
            Write-Error "Profile generation failed - required files not found"
            Write-Host "Available files in current directory:"
            Get-ChildItem -Filter "*profdata*", "*log*" | ForEach-Object { Write-Host "  $($_.Name)" }
            exit 1
          }

      - name: Upload profile data
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UPLOAD_ARTIFACT_NAME }}
          path: |
            merged.profdata
            en-US.log
          retention-days: 7
