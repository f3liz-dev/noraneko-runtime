# SPDX-License-Identifier: MPL-2.0
#
# PGO profile generation workflow for Windows platform.
# 
# This workflow handles profile data collection for Profile-Guided Optimization (PGO) builds on Windows.
# It downloads a browser artifact, extracts it, and runs profile collection workloads.
#
# Inputs:
# - browser-artifact-name (required): artifact produced by build job to download
# - artifact-path (optional): path on runner where artifact is placed
# - runner (optional): runner label to run on (default: windows-latest)
# - target-arch (optional): architecture string (x86_64)
# - upload-artifact-name (optional): artifact name to upload the profdata/jarlog under
#

on:
  workflow_call:
    # Callers may pass secrets using `secrets: inherit` when they invoke this reusable workflow.
    # Do not hardcode secrets here; the caller should specify `secrets: inherit`.
    inputs:
      browser-artifact-name:
        description: 'Artifact to download'
        required: true
        type: string
      artifact-path:
        description: 'Path on the runner where the browser artifact will be placed'
        required: false
        type: string
        default: 'C:\artifact'
      runner:
        description: 'Runner label to execute the job on'
        required: false
        type: string
        default: 'windows-latest'
      target-arch:
        description: 'Target architecture (x86_64)'
        required: false
        type: string
        default: 'x86_64'
      upload-artifact-name:
        description: 'Name for the uploaded profdata/jarlog artifact'
        required: false
        type: string

jobs:
  generate-profdata-and-jarlog:
    name: Generate PGO Profile Data and Jarlog (${{ inputs.target-arch }})
    runs-on: ${{ inputs.runner }}
    # expose inputs as env for steps
    env:
      ARTIFACT_PATH: ${{ inputs.artifact-path }}
      TARGET_ARCH: ${{ inputs.target-arch }}
      BROWSER_ARTIFACT_NAME: ${{ inputs.browser-artifact-name }}
      UPLOAD_ARTIFACT_NAME: ${{ inputs.upload-artifact-name || format('{0}-profile-generate-output', inputs.browser-artifact-name) }}

    steps:
      # Download the browser build artifact produced by build workflows
      - name: Download Build Artifact üì•
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.browser-artifact-name }}
          path: ${{ env.ARTIFACT_PATH }}

      # Checkout the repository so scripts and mach are available
      - name: Checkout source üß¨
        uses: actions/checkout@v4

      # Setup Mozilla Build environment (Windows)
      - name: Setup Mozilla Build ü™õ
        shell: pwsh
        run: |
          (New-Object System.Net.WebClient).DownloadFile("https://ftp.mozilla.org/pub/mozilla/libraries/win32/MozillaBuildSetup-Latest.exe","C:\MozillaBuildSetup-Latest.exe")
          C:\MozillaBuildSetup-Latest.exe /S | out-null

      # Extract browser artifact
      - name: Extract Browser Artifact üì¶
        shell: pwsh
        run: |
          cd $env:ARTIFACT_PATH
          if (Test-Path "*.zip") {
            $zipFile = Get-ChildItem -Name "*.zip" | Select-Object -First 1
            Expand-Archive -Path $zipFile -DestinationPath . -Force
            Write-Output "Extracted: $zipFile"
          }
          
          # Find the extracted browser binary
          $binaryPath = Get-ChildItem -Recurse -Name "noraneko.exe" | Select-Object -First 1
          if (-not $binaryPath) {
            Write-Output "Browser binary not found!"
            Get-ChildItem -Recurse -Name "*noraneko*" | ForEach-Object { Write-Output $_ }
            exit 1
          }
          
          $fullBinaryPath = Join-Path $env:ARTIFACT_PATH $binaryPath
          Write-Output "BROWSER_BINARY_PATH=$fullBinaryPath" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "Browser binary found at: $fullBinaryPath"

      # Generate Profdata and Jarlog (Windows)
      - name: Generate Profile Data üîÑ
        shell: pwsh
        run: |
          $Env:USE_MINTTY = "0"
          $workspace_dir = [regex]::replace($env:GITHUB_WORKSPACE, "^([A-Z]):", { "/" + $args.value.Substring(0, 1).toLower() }) -replace "\\","/"
          
          echo "cd $workspace_dir" '' >> mozilla-build-run.sh
          echo 'export PATH=/c/mozilla-build/msys2/usr/bin:$PATH' '' >> mozilla-build-run.sh
          echo './mach --no-interactive bootstrap --application-choice browser' '' >> mozilla-build-run.sh
          
          # Convert Windows path to Unix path for use in Mozilla Build shell
          $unixBinaryPath = [regex]::replace($env:BROWSER_BINARY_PATH, "^([A-Z]):", { "/" + $args.value.Substring(0, 1).toLower() }) -replace "\\","/"
          
          # Run profile generation with proper error handling and timeout
          echo "timeout 600 env LLVM_PROFDATA=/c/Users/runneradmin/.mozbuild/clang/bin/llvm-profdata.exe JARLOG_FILE=en-US.log ./mach python build/pgo/profileserver.py --binary `"$unixBinaryPath`"" '' >> mozilla-build-run.sh
          
          # Execute the profile generation
          C:\mozilla-build\start-shell.bat $workspace_dir\mozilla-build-run.sh
          
          # Verify generated files
          if ((Test-Path "merged.profdata") -and (Test-Path "en-US.log")) {
            Write-Output "Profile generation successful!"
            Get-ChildItem -Name "merged.profdata", "en-US.log" | ForEach-Object { 
              $item = Get-Item $_
              Write-Output "$($item.Name): $($item.Length) bytes"
            }
          } else {
            Write-Output "Profile generation failed - required files not found"
            Get-ChildItem -Name "*.profdata", "*.log" | ForEach-Object { Write-Output $_ }
            exit 1
          }

      # Upload profdata and jarlog for downstream jobs to consume.
      - name: Upload Profile Data üéÅ
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UPLOAD_ARTIFACT_NAME }}
          path: |
            merged.profdata
            en-US.log
          retention-days: 7