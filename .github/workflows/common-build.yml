# SPDX-License-Identifier: MPL-2.0

on:
  workflow_call:
    inputs:
      platform:
        type: string
        required: true
      arch:
        type: string
        required: true
      debug:
        type: boolean
        required: true
        default: true
      release:
        type: boolean
        required: false
        default: true
      code-coverage:
        type: boolean
        required: false
        default: false
      pgo:
        type: boolean
        required: false
        default: false
      pgo_mode:
        type: string
        required: false
        default: "" # e.g., "native", "generate", "use"
      pgo_artifact_name:
        type: string
        required: false
        default: ""
      MOZ_BUILD_DATE:
        type: string
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "latest"

      - name: Clone
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.platform == 'mac' && 'recursive' || 'true' }}

      - name: Apply upstream patches
        run: |
          PATCH_DIR=".github/patches/upstream"
          if [ -d "$PATCH_DIR" ]; then
            for patch in "$PATCH_DIR"/*.patch; do
              [ -e "$patch" ] || continue
              echo "Applying patch: $(basename "$patch")"
              git apply --verbose "$patch"
            done
          else
            echo "Patch directory not found, skipping patch application."
          fi

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Setup Rust
        run: ./.github/workflows/scripts/setup-rust.sh ${{ inputs.platform }} ${{ inputs.arch }} ${{ inputs.pgo_artifact_name }}

      - name: Allocate swap
        run: ./.github/workflows/scripts/allocate-swap.sh ${{ inputs.arch }}

      - name: Download PGO Artifact if exists
        if: inputs.pgo_mode == 'use' && inputs.pgo_artifact_name != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.pgo_artifact_name }}
          path: ~/artifacts

      - name: Setup noraneko
        run: |
          ./.github/workflows/scripts/setup-noraneko.sh \
            "${{ inputs.platform }}" \
            "${{ inputs.arch }}" \
            "${{ toJSON(inputs.debug) }}" \
            "${{ toJSON(inputs.pgo) }}" \
            "${{ inputs.pgo_mode }}" \
            "${{ inputs.pgo_artifact_name }}" \
            "${{ inputs.MOZ_BUILD_DATE }}"
        env:
          SCCACHE_GHA_ENABLED: "on"

      - name: Build & Package
        run: ./.github/workflows/scripts/build-and-package.sh ${{ inputs.platform }} ${{ inputs.arch }} ${{ inputs.MOZ_BUILD_DATE }}
        env:
          SCCACHE_GHA_ENABLED: "on"

      - name: Remove same name uploaded artifacts
        if: inputs.platform == 'windows'
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            noraneko-windows-x86_64-moz-artifact
            windows-x86_64-dist-host
            windows-x86_64-application-ini

      - name: Publish Package Mozilla Artifact
        uses: actions/upload-artifact@v4
        with:
          name: noraneko-${{ inputs.platform }}-${{ inputs.arch }}-moz-artifact
          path: ${{ inputs.platform == 'windows' && format('~/output/noraneko-{0}-{1}-moz-artifact.zip', inputs.platform, inputs.arch) || format('~/output/noraneko-{0}-{1}-moz-artifact.tar.xz', inputs.platform, inputs.arch) }}

      - name: Publish Profile Generate Mode Package
        if: inputs.pgo_mode == 'generate' && inputs.platform == 'windows' && inputs.arch == 'x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: noraneko-windows-x86_64-profile-generate-mode-package
          path: ${{ format('~/output/noraneko-{0}-{1}-moz-artifact.zip', inputs.platform, inputs.arch) }}

      - name: Publish dist/host for MAR
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.platform }}-${{ inputs.arch }}-dist-host
          path: ${{ inputs.platform == 'windows' && 'obj-x86_64-pc-windows-msvc/dist/host/' || format('obj-{0}-*-linux-gnu/dist/host/', inputs.arch) }}
          overwrite: true

      - name: Publish nora-application.ini for MAR
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.platform }}-${{ inputs.arch }}-application-ini
          path: ./nora-application.ini
          overwrite: true
